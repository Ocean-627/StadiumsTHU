user nginx;
worker_processes 2;

events {
    # epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式
    # 但是仅用于 linux2.6 以上内核,可以大大提高 nginx 的性能
    use epoll;
    # 单个后台 worker process 进程的最大并发链接数
    worker_connections  1024;
}

http {
    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    # 必须设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime.
    sendfile        on;
    
    # 设定请求缓冲
    client_header_buffer_size 2k;

    include       mime.types;
    default_type  application/octet-stream;

    server {  
        listen  80;  
        server_name cbx.iterator-traits.com;  
        rewrite ^(.*)$  https://$host$1 permanent;  
    }  

    server {
        listen  443 ssl http2;
        server_name cbx.iterator-traits.com;

        ssl_certificate /etc/letsencrypt/live/cbx.iterator-traits.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/cbx.iterator-traits.com/privkey.pem;
        ssl_session_timeout 1d;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets on;
  
        # 一般推荐使用的ssl_ciphers值: https://wiki.mozilla.org/Security/Server_Side_TLS
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK';
        ssl_prefer_server_ciphers on;  

        error_page  404              /404.html;
        
        location = /404.html {
            root   /etc/nginx/html/;
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /500.html;
        location = /500.html {
            root   /etc/nginx/html/;
        }

        #官网介绍设置这条可以解决history路由的问题
        location / {
            if ($request_uri ~* '/$|\.html$') {
                add_header Cache-Control no-store;
            }
            root   /etc/nginx/html/;
            index index.html index.htm;
            try_files $uri $uri/ @router;
        }

        location @router {
            rewrite ^.*$ /index.html last;
        }

        location /api {
            proxy_pass http://app:8000;
        }

        location /media {
            proxy_pass http://app:8000;
        }

        # 静态文件服务
        location /static/ {
            autoindex on;
            alias /etc/nginx/html/static/;
        }
    }
}